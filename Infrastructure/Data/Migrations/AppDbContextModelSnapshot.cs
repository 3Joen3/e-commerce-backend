// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Core.Entities.ProductEntities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId")
                        .IsUnique();

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptions");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductOptionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("ProductOptionValues");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ComparePriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComparePriceId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductVariantAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductVariantAttributes");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductVariantPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductVariantPrices");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductImage", b =>
                {
                    b.HasOne("Core.Entities.ProductEntities.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProductEntities.ProductVariant", null)
                        .WithOne("Image")
                        .HasForeignKey("Core.Entities.ProductEntities.ProductImage", "ProductVariantId");

                    b.OwnsOne("Core.ValueObjects.WebAddress", "Url", b1 =>
                        {
                            b1.Property<Guid>("ProductImageId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Url");

                            b1.HasKey("ProductImageId");

                            b1.ToTable("ProductImages");

                            b1.WithOwner()
                                .HasForeignKey("ProductImageId");
                        });

                    b.Navigation("Url")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductOption", b =>
                {
                    b.HasOne("Core.Entities.ProductEntities.Product", null)
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductOptionValue", b =>
                {
                    b.HasOne("Core.Entities.ProductEntities.ProductOption", null)
                        .WithMany("Values")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductVariant", b =>
                {
                    b.HasOne("Core.Entities.ProductEntities.ProductVariantPrice", "ComparePrice")
                        .WithMany()
                        .HasForeignKey("ComparePriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProductEntities.ProductVariantPrice", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProductEntities.Product", null)
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComparePrice");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductVariantAttribute", b =>
                {
                    b.HasOne("Core.Entities.ProductEntities.ProductVariant", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductVariantPrice", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Currency", "Currency", b1 =>
                        {
                            b1.Property<Guid>("ProductVariantPriceId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Code")
                                .HasColumnType("TEXT")
                                .HasColumnName("Currency");

                            b1.HasKey("ProductVariantPriceId");

                            b1.ToTable("ProductVariantPrices");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantPriceId");
                        });

                    b.Navigation("Currency")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Options");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductOption", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Core.Entities.ProductEntities.ProductVariant", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
